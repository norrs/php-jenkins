<?xml version="1.0" encoding="UTF-8"?>
<project name="example-project" default="build">

    <property name="composer.args" value=""/>
    <property name="composer.install.args" value=""/>
    <tstamp>
        <format property="fourteen.days.ago" pattern="MM/dd/yyyy hh:mm aa" offset="-14" unit="day"/>
    </tstamp>

    <!-- Dependency management -->
    <target name="check-composer-uptodate">
        <delete>
            <fileset dir="${basedir}">
                <include name="composer.phar"/>
                <date datetime="${fourteen.days.ago}" when="before"/>
            </fileset>
        </delete>
        <available property="composer.uptodate" file="${basedir}/composer.phar"/>
    </target>

    <target name="download-composer" depends="check-composer-uptodate" unless="composer.uptodate">
        <exec dir="${basedir}" executable="sh" failonerror="true">
            <arg value="-c"/>
            <arg value="curl -sS https://getcomposer.org/installer | php -- --install-dir '${basedir}'"/>
        </exec>
    </target>

    <target name="install-deps" depends="download-composer,check-deps-uptodate" unless="deps.uptodate">
        <exec dir="${basedir}" executable="php" failonerror="true">
            <arg value="${basedir}/composer.phar"/>
            <arg value="install"/>
            <arg line="${composer.args}"/>
            <arg line="${composer.install.args}"/>
        </exec>
    </target>

    <target name="check-composer-lock-uptodate" unless="composer.lock.uptodate">
        <uptodate property="composer.lock.uptodate"
                  targetfile="${basedir}/composer.lock"
                  srcfile="${basedir}/composer.json"/>
    </target>

    <target name="update-composer-lock" depends="check-composer-lock-uptodate" unless="composer.lock.uptodate">
        <exec dir="${basedir}" executable="${basedir}/bin/composer-update-wrapper.sh" failonerror="true">
            <arg value="update"/>
            <arg line="${composer.args}"/>
            <arg line="${composer.install.args}"/>
        </exec>
    </target>

    <target name="check-deps-uptodate" depends="update-composer-lock" unless="deps.uptodate">
        <uptodate property="deps.uptodate"
                  srcfile="${basedir}/composer.lock"
                  targetfile="${basedir}/vendor/composer/autoload_classmap.php"/>
    </target>



    <target name="build"
            depends="prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit-ci,-check-failure"/>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/apigen"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare" unless="prepare.done" depends="clean,install-deps,generate-code"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="generate-code">

    </target>

    <target name="lint" depends="check-deps-uptodate,generate-code">
        <apply executable="php" failonerror="true" taskname="lint">
            <arg value="-l"/>

            <fileset dir="${basedir}/src/main/php">
                <include name="**/*.php"/>
                <modified/>
            </fileset>

            <fileset dir="${basedir}/src/test/php">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${basedir}/vendor/bin/phploc" taskname="phploc">
            <arg value="--count-tests"/>
            <arg path="${basedir}/src/main/php"/>
            <arg path="${basedir}/src/test/php"/>
        </exec>
    </target>

    <target name="phploc-ci" depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format">
        <exec executable="${basedir}/vendor/bin/phploc" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/src/main/php"/>
            <arg path="${basedir}/src/test/php"/>
        </exec>
    </target>

    <target name="pdepend" depends="prepare" description="Calculate software metrics using PHP_Depend">
        <exec executable="${basedir}/vendor/bin/pdepend" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/src/main/php"/>
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print result in text format">
        <exec executable="${basedir}/vendor/bin/phpmd" taskname="phpmd">
            <arg path="${basedir}/src/main/php"/>
            <arg value="text"/>
            <arg path="${basedir}/phpmd.xml"/>
        </exec>
    </target>

    <target name="phpmd-ci" depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format">
        <exec executable="${basedir}/vendor/bin/phpmd" taskname="phpmd">
            <arg path="${basedir}/src/main/php"/>
            <arg value="xml"/>
            <arg path="${basedir}/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print result in text format">
        <exec executable="${basedir}/vendor/bin/phpcs" taskname="phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/src/main/php"/>
            <arg path="${basedir}/src/test/php"/>
        </exec>
    </target>

    <target name="phpcs-ci" depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format">
        <exec executable="${basedir}/vendor/bin/phpcs" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/src/main/php"/>
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="${basedir}/vendor/bin/phpcpd" taskname="phpcpd">
            <arg path="${basedir}/src/main/php"/>
        </exec>
    </target>

    <target name="phpcpd-ci" depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format">
        <exec executable="${basedir}/vendor/bin/phpcpd" taskname="phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/src/main/php"/>
        </exec>
    </target>

    <target name="phpunit" depends="prepare" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
        </exec>
    </target>

    <target name="test" depends="phpunit" description="Run unit tests with PHPUnit" />

    <target name="phpunit-ci" depends="prepare" description="Run unit tests with PHPUnit while generating junit, coverage html, clover and crap4j reports">
        <exec executable="${basedir}/vendor/bin/phpunit" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg line="--log-junit ${basedir}/build/logs/junit.xml"/>
            <arg line="--coverage-html ${basedir}/build/logs/coverage"/>
            <arg line="--coverage-clover ${basedir}/build/logs/clover.xml"/>
            <arg line="--coverage-crap4j ${basedir}/build/logs/crap4j.xml"/>
            <arg line="--verbose"/>
        </exec>
    </target>

    <target name="apigen" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate API documentation using apigen">
        <exec dir="${basedir}" executable="php" failonerror="true">
            <arg line="vendor/bin/apigen" />
            <arg line="--config apigen.neon"/>
        </exec>
    </target>

    <target name="package">
       <exec dir="${basedir}" executable="${basedir}/bin/make-deploy-tarball" failonerror="true">
         <arg value="${release}"/>
       </exec>
    </target>


   
    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>
</project>
